theme_minimal() +
theme(legend.position = "none") # neighborhood names squish out the plot
ggplot(adf, aes(x = longitude, y = latitude, color = neighborhood)) +
geom_point(alpha = 0.7) +
labs(title = "Spatial Distribution of AirBnB Listings",
# subtitle = "Checking that listings are assigned to DC neighborhoods",
color = "Neighborhood") +
theme_minimal() +
theme(legend.position = "none") # neighborhood names squish out the plot
# calculate average price by neighborhood for zdf...
zdf_avg_price <- zdf %>%
group_by(shortNeighborhood) %>%
summarize(avg_price_zillow = mean(price, na.rm = TRUE))
# ...and adf
adf_avg_price <- adf %>%
group_by(shortNeighborhood) %>%
summarize(avg_price_airbnb = mean(price, na.rm = TRUE))
# join as a df
combined_avg_price <- full_join(zdf_avg_price, adf_avg_price, by = "shortNeighborhood")
# get total average price, add to df
total_avg_price_zillow <- mean(zdf$price, na.rm = TRUE)
total_avg_price_airbnb <- mean(adf$price, na.rm = TRUE)
combined_avg_price <- combined_avg_price %>%
add_row(shortNeighborhood = "Total", avg_price_zillow = total_avg_price_zillow, avg_price_airbnb = total_avg_price_airbnb)
# calculate percent change from total average price for each neighborhood
combined_avg_price <- combined_avg_price %>%
mutate(
change_zillow = (avg_price_zillow - total_avg_price_zillow) / total_avg_price_zillow * 100,
change_airbnb = (avg_price_airbnb - total_avg_price_airbnb) / total_avg_price_airbnb * 100
)
# format
combined_avg_price_formatted <- combined_avg_price %>%
mutate(
avg_price_zillow = dollar(avg_price_zillow, accuracy = 0.01),
avg_price_airbnb = dollar(avg_price_airbnb, accuracy = 0.01),
change_zillow = percent(change_zillow / 100, accuracy = 0.01),
change_airbnb = percent(change_airbnb / 100, accuracy = 0.01)
)
print(combined_avg_price_formatted)
ggplot(combined_avg_price, aes(x = avg_price_zillow, y = avg_price_airbnb)) +
geom_point() +
# geom_text(aes(label = shortNeighborhood), vjust = -0.5, hjust = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "Zillow vs Airbnb Prices by Neighborhood",
x = "Zillow Prices",
y = "Airbnb Prices") +
theme_minimal()
# Fit a linear model
fit <- lm(avg_price_airbnb ~ avg_price_zillow, data = combined_avg_price)
# Print the summary of the linear model
summary(fit)
adf_filtered <- adf %>% filter(adf$price < 1000)
ggplot() +
geom_histogram(data = adf_filtered, aes(x = price, fill = "Airbnb"), binwidth = 50, alpha = 0.5, position = "identity") +
scale_fill_manual(values = c("Airbnb" = "red")) +
labs(title = "Histogram of Airbnb vs Zillow Prices", x = "Price", y = "Count") +
theme_minimal()
zdf_filtered <- zdf %>% filter(zdf$price < 2000000)
ggplot() +
geom_histogram(data = zdf_filtered, aes(x = price, fill = "Zillow"), binwidth = 50000, alpha = 0.5, position = "identity") +
scale_fill_manual(values = c("Zillow" = "blue")) +
labs(title = "Histogram of Airbnb vs Zillow Prices", x = "Price", y = "Count") +
theme_minimal()
ggplot() +
# geom_boxplot(data = adf, aes(x = shortNeighborhood, y = price, fill = "Airbnb"), alpha = 0.5) +
geom_boxplot(data = zdf, aes(x = shortNeighborhood, y = price, fill = "Zillow"), alpha = 0.5) +
scale_fill_manual(values = "blue") +
labs(title = "Airbnb vs Zillow Prices by Neighborhood", x = "Neighborhood", y = "Price") +
theme_minimal() +
theme(legend.position = "none") +
coord_flip()
# theme(legend.position = "none", axis.text.x = element_text(angle = 90, hjust = 1)) # +
# coord_flip()
ggplot() +
geom_boxplot(data = adf, aes(x = shortNeighborhood, y = price, fill = "Airbnb"), alpha = 0.5) +
# geom_boxplot(data = zdf, aes(x = shortNeighborhood, y = price, fill = "Zillow"), alpha = 0.5) +
scale_fill_manual(values = "red") +
labs(title = "Airbnb vs Zillow Prices by Neighborhood", x = "Neighborhood", y = "Price") +
theme_minimal() +
theme(legend.position = "none") +
coord_flip()
airbnb_summary <- adf %>%
group_by(shortNeighborhood) %>%
summarise(median_airbnb_price = median(price, na.rm = TRUE))
airbnb_summary
zillow_summary <- zdf %>%
group_by(shortNeighborhood) %>%
summarise(median_zillow_price = median(price, na.rm = TRUE))
zillow_summary
# normalize the prices for the heatmap
airbnb_summary <- airbnb_summary %>%
mutate(median_a_scaled = scale(median_airbnb_price))
zillow_summary <- zillow_summary %>%
mutate(median_z_scaled = scale(median_zillow_price))
# combine and pivot longer
heatmap_df <- full_join(
airbnb_summary %>% select(shortNeighborhood, median_a_scaled),
zillow_summary %>% select(shortNeighborhood, median_z_scaled),
by = "shortNeighborhood"
) %>%
pivot_longer(cols = c(median_a_scaled, median_z_scaled),
names_to = "Type", values_to = "Price")
# create heatmap
ggplot(heatmap_df, aes(x = shortNeighborhood, y = Type, fill = Price)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "red") +
theme_minimal() +
labs(title = "Heatmap of Scaled Median Airbnb vs Zillow Prices", x = "Neighborhood", y = "Type") +
coord_flip() # +
# theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate x-axis labels for legibility
roi_df <- full_join(airbnb_summary, zillow_summary, by = "shortNeighborhood") %>%
mutate(percent = (median_airbnb_price / median_zillow_price) * 100)
ggplot(roi_df, aes(x = reorder(shortNeighborhood, percent), y = percent)) +
geom_col(fill = "blue") +
coord_flip() +
labs(title = "Airbnb Price as % of Zillow Price", x = "Neighborhood", y = "Percentage (%)") +
theme_minimal()
airbnb_counts <- as.data.frame(table(adf$shortNeighborhood))
colnames(airbnb_counts) <- c("shortNeighborhood", "airbnb_listings")
zillow_counts <- as.data.frame(table(zdf$shortNeighborhood))
colnames(zillow_counts) <- c("shortNeighborhood", "zillow_listings")
# Merge counts on neighborhood
listings_count <- full_join(airbnb_counts, zillow_counts, by = "shortNeighborhood") %>%
replace_na(list(airbnb_listings = 0, zillow_listings = 0)) %>%
pivot_longer(cols = c(airbnb_listings, zillow_listings), names_to = "Listing Type", values_to = "Count")
# Plot
ggplot(listings_count, aes(x = reorder(shortNeighborhood, Count), y = Count, fill = `Listing Type`)) +
geom_col(position = "dodge") +
# coord_flip() +
scale_fill_manual(values = c("airbnb_listings" = "red", "zillow_listings" = "blue")) +
labs(title = "Number of Listings: Airbnb vs Zillow", x = "Neighborhood", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
airbnb_types <- adf %>%
group_by(shortNeighborhood, room_type) %>%
summarise(count = n(), .groups = "drop")
ggplot(airbnb_types, aes(x = shortNeighborhood, y = count, fill = room_type)) +
geom_bar(stat = "identity") +
# coord_flip() +
scale_fill_viridis_d() +
labs(title = "Airbnb Property Types by Neighborhood", x = "Neighborhood", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
roi_table <- adf %>%
group_by(shortNeighborhood) %>%
summarise(avg_airbnb_price = mean(price, na.rm = TRUE),
avg_reviews = mean(reviews_per_month, na.rm = TRUE)) %>%
full_join(zillow_summary, by = "shortNeighborhood") %>%
mutate(estimated_revenue = avg_airbnb_price * avg_reviews * 12 * 2, # 12 months, 2 nights per review
roi = estimated_revenue / median_zillow_price) %>%
select(shortNeighborhood, roi, everything()) %>% # reorder columns
arrange(desc(roi))
# format roi as a percent
roi_table_percent <- roi_table %>%
mutate(
roi = percent(roi),
avg_airbnb_price = dollar(avg_airbnb_price, accuracy = 0.01),
median_zillow_price = dollar(median_zillow_price, accuracy = 0.01),
estimated_revenue = dollar(estimated_revenue, accuracy = 0.01)
)
print(roi_table_percent)
summary(roi_table$roi)
# Filter adf for prices less than 500
adf_filtered <- adf %>% filter(price < 500)
ggplot(adf_filtered, aes(x = shortNeighborhood, y = number_of_reviews, fill = price)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Heatmap of Reviews vs Zillow Prices", x = "Neighborhood", y = "Number of Reviews") +
coord_flip()
# load the geojson, note the British spelling of neighbourhood
neighborhoods <- st_read(system.file("extdata", "neighbourhoods_cleaned.geojson", package = "DC_property_data"), quiet = TRUE)
# aggregate review counts by neighborhood
reviews_by_neighborhood <- adf %>%
group_by(neighbourhood = neighborhood) %>%
summarize(total_reviews = sum(number_of_reviews, na.rm = TRUE))
# merge review data with spatial neighborhoods
choropleth_data <- neighborhoods %>%
left_join(reviews_by_neighborhood, by = "neighbourhood")
# create the choropleth map
ggplot() +
geom_sf(data = choropleth_data, aes(fill = total_reviews), color = "black") +
scale_fill_gradient(low = "blue", high = "red", na.value = "grey50") +
theme_void() +
labs(title = "Choropleth of Airbnb Reviews by Neighborhood", fill = "Total Reviews") +
theme(legend.position = "right")
# load the geojson, note the British spelling of 'neighbourhood'
neighborhoods <- st_read(system.file("extdata", "neighbourhoods_cleaned.geojson", package = "DC_property_data"), quiet = TRUE)
# aggregate median price by neighborhood
price_by_neighborhood <- adf %>%
group_by(neighbourhood = neighborhood) %>%  # Match column name in GeoJSON
summarize(median_price = median(price, na.rm = TRUE))
# merge price data with spatial neighborhoods
choropleth_data <- neighborhoods %>%
left_join(price_by_neighborhood, by = "neighbourhood")
# create the choropleth map
ggplot() +
geom_sf(data = choropleth_data, aes(fill = median_price), color = "black") +
scale_fill_gradient(low = "blue", high = "red", na.value = "grey50") +
theme_void() +
labs(title = "Choropleth of Airbnb Median Price by Neighborhood", fill = "Median Price") +
theme(legend.position = "right")
# convert adf to sf object
adf_sf <- st_as_sf(adf, coords = c("longitude", "latitude"), crs = 4326)
# get basemap from OpenStreetMap
ggplot() +
annotation_map_tile(type = "osm", zoom = 12) +  # getch OSM basemap
geom_sf(data = adf_sf, aes(size = number_of_reviews, color = price), alpha = 0.6) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Bubble Map: Popularity vs AirBnB Prices", subtitle = "Based on number of reviews", x = "Longitude", y = "Latitude") +
theme_minimal()
# aggregate data by neighborhood
neighborhood_summary <- adf %>%
group_by(neighborhood) %>%
summarize(
total_reviews = sum(number_of_reviews, na.rm = TRUE),
median_price = median(price, na.rm = TRUE),
longitude = mean(longitude, na.rm = TRUE),
latitude = mean(latitude, na.rm = TRUE)
) %>%
drop_na(longitude, latitude)  # remove any NA coordinates
# convert to sf object
neighborhood_sf <- st_as_sf(neighborhood_summary, coords = c("longitude", "latitude"), crs = 4326)
# plot with OpenStreetMap basemap
ggplot() +
annotation_map_tile(type = "osm", zoom = 12) +  # fetch OSM basemap
geom_sf(data = neighborhood_sf, aes(size = total_reviews, color = median_price), alpha = 0.7) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Bubble Map: Popularity vs Airbnb Prices by Neighborhood",
subtitle = "Bubble size = Total Reviews, Color = Median Price",
x = "Longitude", y = "Latitude") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(tibble)
library(ggplot2)
library(scales)
library(dplyr)
library(tidyr)
library(sf)
library(ggmap)
library(ggspatial)
library(rnaturalearth)
library(rnaturalearthdata)
load_all("../..") # packages that clean and prep the data for analysis / visualization
re_df <- read_real_estate_json()
re_df <- as_tibble(re_df)
head(re_df)
adf <- read_airbnb_csv()
head(adf)
zdf <- assign_neighborhood(re_df)
zdf <- as_tibble(zdf)
head(zdf)
ggplot(zdf, aes(x = longitude, y = latitude, color = neighborhood == "Unknown")) +
geom_point(alpha = 0.7) +
scale_color_manual(values = c("FALSE" = "black", "TRUE" = "red")) +
labs(title = "Spatial Distribution of Zillow Listings",
subtitle = "Checking that listings are assigned to DC neighborhoods",
color = "Unknown Neighborhood") +
theme_minimal()
zdf %>%
count(shortNeighborhood, sort = TRUE)
zdf <- zdf[zdf$neighborhood != "Unknown", ]
ggplot(zdf, aes(x = longitude, y = latitude, color = neighborhood)) +
geom_point(alpha = 0.7) +
labs(title = "Spatial Distribution of Zillow Listings",
subtitle = "Checking that listings are assigned to DC neighborhoods",
color = "Neighborhood") +
theme_minimal() +
theme(legend.position = "none") # neighborhood names squish out the plot
ggplot(adf, aes(x = longitude, y = latitude, color = neighborhood)) +
geom_point(alpha = 0.7) +
labs(title = "Spatial Distribution of AirBnB Listings",
# subtitle = "Checking that listings are assigned to DC neighborhoods",
color = "Neighborhood") +
theme_minimal() +
theme(legend.position = "none") # neighborhood names squish out the plot
# calculate average price by neighborhood for zdf...
zdf_avg_price <- zdf %>%
group_by(shortNeighborhood) %>%
summarize(avg_price_zillow = mean(price, na.rm = TRUE))
# ...and adf
adf_avg_price <- adf %>%
group_by(shortNeighborhood) %>%
summarize(avg_price_airbnb = mean(price, na.rm = TRUE))
# join as a df
combined_avg_price <- full_join(zdf_avg_price, adf_avg_price, by = "shortNeighborhood")
# get total average price, add to df
total_avg_price_zillow <- mean(zdf$price, na.rm = TRUE)
total_avg_price_airbnb <- mean(adf$price, na.rm = TRUE)
combined_avg_price <- combined_avg_price %>%
add_row(shortNeighborhood = "Total", avg_price_zillow = total_avg_price_zillow, avg_price_airbnb = total_avg_price_airbnb)
# calculate percent change from total average price for each neighborhood
combined_avg_price <- combined_avg_price %>%
mutate(
change_zillow = (avg_price_zillow - total_avg_price_zillow) / total_avg_price_zillow * 100,
change_airbnb = (avg_price_airbnb - total_avg_price_airbnb) / total_avg_price_airbnb * 100
)
# format
combined_avg_price_formatted <- combined_avg_price %>%
mutate(
avg_price_zillow = dollar(avg_price_zillow, accuracy = 0.01),
avg_price_airbnb = dollar(avg_price_airbnb, accuracy = 0.01),
change_zillow = percent(change_zillow / 100, accuracy = 0.01),
change_airbnb = percent(change_airbnb / 100, accuracy = 0.01)
)
print(combined_avg_price_formatted)
ggplot(combined_avg_price, aes(x = avg_price_zillow, y = avg_price_airbnb)) +
geom_point() +
# geom_text(aes(label = shortNeighborhood), vjust = -0.5, hjust = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "Zillow vs Airbnb Prices by Neighborhood",
x = "Zillow Prices",
y = "Airbnb Prices") +
theme_minimal()
# Fit a linear model
fit <- lm(avg_price_airbnb ~ avg_price_zillow, data = combined_avg_price)
# Print the summary of the linear model
summary(fit)
adf_filtered <- adf %>% filter(adf$price < 1000)
ggplot() +
geom_histogram(data = adf_filtered, aes(x = price, fill = "Airbnb"), binwidth = 50, alpha = 0.5, position = "identity") +
scale_fill_manual(values = c("Airbnb" = "red")) +
labs(title = "Histogram of Airbnb Prices", x = "Price", y = "Count") +
theme_minimal() +
theme(legend.position = "none")
zdf_filtered <- zdf %>% filter(zdf$price < 2000000)
ggplot() +
geom_histogram(data = zdf_filtered, aes(x = price, fill = "Zillow"), binwidth = 50000, alpha = 0.5, position = "identity") +
scale_fill_manual(values = c("Zillow" = "blue")) +
labs(title = "Histogram of Zillow Prices", x = "Price", y = "Count") +
theme_minimal() +
theme(legend.position = "none")
ggplot() +
# geom_boxplot(data = adf, aes(x = shortNeighborhood, y = price, fill = "Airbnb"), alpha = 0.5) +
geom_boxplot(data = zdf, aes(x = shortNeighborhood, y = price, fill = "Zillow"), alpha = 0.5) +
scale_fill_manual(values = "blue") +
labs(title = "Airbnb vs Zillow Prices by Neighborhood", x = "Neighborhood", y = "Price") +
theme_minimal() +
theme(legend.position = "none") +
coord_flip()
# theme(legend.position = "none", axis.text.x = element_text(angle = 90, hjust = 1)) # +
# coord_flip()
ggplot() +
geom_boxplot(data = adf, aes(x = shortNeighborhood, y = price, fill = "Airbnb"), alpha = 0.5) +
# geom_boxplot(data = zdf, aes(x = shortNeighborhood, y = price, fill = "Zillow"), alpha = 0.5) +
scale_fill_manual(values = "red") +
labs(title = "Airbnb vs Zillow Prices by Neighborhood", x = "Neighborhood", y = "Price") +
theme_minimal() +
theme(legend.position = "none") +
coord_flip()
airbnb_summary <- adf %>%
group_by(shortNeighborhood) %>%
summarise(median_airbnb_price = median(price, na.rm = TRUE))
airbnb_summary
zillow_summary <- zdf %>%
group_by(shortNeighborhood) %>%
summarise(median_zillow_price = median(price, na.rm = TRUE))
zillow_summary
# normalize the prices for the heatmap
airbnb_summary <- airbnb_summary %>%
mutate(median_a_scaled = scale(median_airbnb_price))
zillow_summary <- zillow_summary %>%
mutate(median_z_scaled = scale(median_zillow_price))
# combine and pivot longer
heatmap_df <- full_join(
airbnb_summary %>% select(shortNeighborhood, median_a_scaled),
zillow_summary %>% select(shortNeighborhood, median_z_scaled),
by = "shortNeighborhood"
) %>%
pivot_longer(cols = c(median_a_scaled, median_z_scaled),
names_to = "Type", values_to = "Price")
# create heatmap
ggplot(heatmap_df, aes(x = shortNeighborhood, y = Type, fill = Price)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "red") +
theme_minimal() +
labs(title = "Heatmap of Scaled Median Airbnb vs Zillow Prices", x = "Neighborhood", y = "Type") +
coord_flip() # +
# theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate x-axis labels for legibility
roi_df <- full_join(airbnb_summary, zillow_summary, by = "shortNeighborhood") %>%
mutate(percent = (median_airbnb_price / median_zillow_price) * 100)
ggplot(roi_df, aes(x = reorder(shortNeighborhood, percent), y = percent)) +
geom_col(fill = "blue") +
coord_flip() +
labs(title = "Airbnb Price as % of Zillow Price", x = "Neighborhood", y = "Percentage (%)") +
theme_minimal()
airbnb_counts <- as.data.frame(table(adf$shortNeighborhood))
colnames(airbnb_counts) <- c("shortNeighborhood", "airbnb_listings")
zillow_counts <- as.data.frame(table(zdf$shortNeighborhood))
colnames(zillow_counts) <- c("shortNeighborhood", "zillow_listings")
# Merge counts on neighborhood
listings_count <- full_join(airbnb_counts, zillow_counts, by = "shortNeighborhood") %>%
replace_na(list(airbnb_listings = 0, zillow_listings = 0)) %>%
pivot_longer(cols = c(airbnb_listings, zillow_listings), names_to = "Listing Type", values_to = "Count")
# Plot
ggplot(listings_count, aes(x = reorder(shortNeighborhood, Count), y = Count, fill = `Listing Type`)) +
geom_col(position = "dodge") +
# coord_flip() +
scale_fill_manual(values = c("airbnb_listings" = "red", "zillow_listings" = "blue")) +
labs(title = "Number of Listings: Airbnb vs Zillow", x = "Neighborhood", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
airbnb_types <- adf %>%
group_by(shortNeighborhood, room_type) %>%
summarise(count = n(), .groups = "drop")
ggplot(airbnb_types, aes(x = shortNeighborhood, y = count, fill = room_type)) +
geom_bar(stat = "identity") +
# coord_flip() +
scale_fill_viridis_d() +
labs(title = "Airbnb Property Types by Neighborhood", x = "Neighborhood", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Filter adf for prices less than 500
adf_filtered <- adf %>% filter(price < 500)
ggplot(adf_filtered, aes(x = shortNeighborhood, y = number_of_reviews, fill = price)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Heatmap of Reviews vs AirBnB Prices", x = "Neighborhood", y = "Number of Reviews") +
coord_flip()
roi_table <- adf %>%
group_by(shortNeighborhood) %>%
summarise(avg_airbnb_price = mean(price, na.rm = TRUE),
avg_reviews = mean(reviews_per_month, na.rm = TRUE)) %>%
full_join(zillow_summary, by = "shortNeighborhood") %>%
mutate(estimated_revenue = avg_airbnb_price * avg_reviews * 12 * 2, # 12 months, 2 nights per review
roi = estimated_revenue / median_zillow_price) %>%
select(shortNeighborhood, roi, everything()) %>% # reorder columns
arrange(desc(roi))
# format roi as a percent
roi_table_percent <- roi_table %>%
mutate(
roi = percent(roi),
avg_airbnb_price = dollar(avg_airbnb_price, accuracy = 0.01),
median_zillow_price = dollar(median_zillow_price, accuracy = 0.01),
estimated_revenue = dollar(estimated_revenue, accuracy = 0.01)
)
print(roi_table_percent)
summary(roi_table$roi)
# load the geojson, note the British spelling of neighbourhood
neighborhoods <- st_read(system.file("extdata", "neighbourhoods_cleaned.geojson", package = "DC_property_data"), quiet = TRUE)
# aggregate review counts by neighborhood
reviews_by_neighborhood <- adf %>%
group_by(neighbourhood = neighborhood) %>%
summarize(total_reviews = sum(number_of_reviews, na.rm = TRUE))
# merge review data with spatial neighborhoods
choropleth_data <- neighborhoods %>%
left_join(reviews_by_neighborhood, by = "neighbourhood")
# create the choropleth map
ggplot() +
geom_sf(data = choropleth_data, aes(fill = total_reviews), color = "black") +
scale_fill_gradient(low = "blue", high = "red", na.value = "grey50") +
theme_void() +
labs(title = "Choropleth of Airbnb Reviews by Neighborhood", fill = "Total Reviews") +
theme(legend.position = "right")
# load the geojson, note the British spelling of 'neighbourhood'
neighborhoods <- st_read(system.file("extdata", "neighbourhoods_cleaned.geojson", package = "DC_property_data"), quiet = TRUE)
# aggregate median price by neighborhood
price_by_neighborhood <- adf %>%
group_by(neighbourhood = neighborhood) %>%  # Match column name in GeoJSON
summarize(median_price = median(price, na.rm = TRUE))
# merge price data with spatial neighborhoods
choropleth_data <- neighborhoods %>%
left_join(price_by_neighborhood, by = "neighbourhood")
# create the choropleth map
ggplot() +
geom_sf(data = choropleth_data, aes(fill = median_price), color = "black") +
scale_fill_gradient(low = "blue", high = "red", na.value = "grey50") +
theme_void() +
labs(title = "Choropleth of Airbnb Median Price by Neighborhood", fill = "Median Price") +
theme(legend.position = "right")
# convert adf to sf object
adf_sf <- st_as_sf(adf, coords = c("longitude", "latitude"), crs = 4326)
# get basemap from OpenStreetMap
ggplot() +
annotation_map_tile(type = "osm", zoom = 12) +  # getch OSM basemap
geom_sf(data = adf_sf, aes(size = number_of_reviews, color = price), alpha = 0.6) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Bubble Map: Popularity vs AirBnB Prices", subtitle = "Based on number of reviews", x = "Longitude", y = "Latitude") +
theme_minimal()
# aggregate data by neighborhood
neighborhood_summary <- adf %>%
group_by(neighborhood) %>%
summarize(
total_reviews = sum(number_of_reviews, na.rm = TRUE),
median_price = median(price, na.rm = TRUE),
longitude = mean(longitude, na.rm = TRUE),
latitude = mean(latitude, na.rm = TRUE)
) %>%
drop_na(longitude, latitude)  # remove any NA coordinates
# convert to sf object
neighborhood_sf <- st_as_sf(neighborhood_summary, coords = c("longitude", "latitude"), crs = 4326)
# plot with OpenStreetMap basemap
ggplot() +
annotation_map_tile(type = "osm", zoom = 12) +  # fetch OSM basemap
geom_sf(data = neighborhood_sf, aes(size = total_reviews, color = median_price), alpha = 0.7) +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Bubble Map: Popularity vs Airbnb Prices by Neighborhood",
subtitle = "Bubble size = Total Reviews, Color = Median Price",
x = "Longitude", y = "Latitude") +
theme_minimal()
devtools::document()
usethis::use_testthat()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
source("~/.active-rstudio-document", echo=TRUE)
getwd()
rlang::last_trace()
getwd()
